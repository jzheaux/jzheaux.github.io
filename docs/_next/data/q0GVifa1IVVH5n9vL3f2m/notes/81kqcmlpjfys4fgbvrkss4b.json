{"pageProps":{"note":{"id":"81kqcmlpjfys4fgbvrkss4b","title":"Tips","layout":"page","desc":"","tags":"spring-security","updated":1739852742785,"created":1739816230926,"custom":{"layout":"page"},"fname":"spring-security.tips","type":"note","vault":{"fsPath":".","selfContained":true,"name":"jzheaux.github.io"},"contentHash":"0ed41c1db461b225b8b48edba7cadde2","links":[{"type":"frontmatterTag","from":{"fname":"spring-security.tips","id":"81kqcmlpjfys4fgbvrkss4b","vaultName":"Dendron-1"},"value":"tags.spring-security","alias":"spring-security","xvault":false,"to":{"fname":"tags.spring-security"}}],"anchors":{"authorization":{"type":"header","text":"Authorization","value":"authorization","line":10,"column":0,"depth":2}},"children":[],"parent":"5z8np7ysy5lpx5gon0rlxi6","data":{}},"body":"<h1 id=\"tips\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tips\"></a>Tips</h1>\n<h2 id=\"authorization\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#authorization\"></a>Authorization</h2>\n<p>Everyone wants to create their own API, and that makes sense. We want our app to look like our domain.</p>\n<p>Historically, Spring Security has one way to do this: SpEL.\nIt's done by publishing a custom <code>MethodSecurityExpressionHandler</code>, which handler returns a <code>SecurityExpressionRoot</code> instance that has the application's custom expressions.\nThis allows the application to do:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isSubscribed() || isAdmin()\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>While I appreciate the readability of this, I'd prefer something more like the following:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Subscribed</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Admin</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This is more testable because I can have unit tests for <code>Subscribed.class</code> and for <code>Admin.class</code>.</p>\n<p>So, how do we achieve that?</p>\n<p>First, create the annotation:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"permitAll()\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authorize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizationManager</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">MethodInvocation</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Second, create an interceptor:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeAuthorizationManager</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthorizationManager</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">MethodInvocation</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SecurityAnnotationScanner</span> authorize <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityAnnotationScanners</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authorize</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthorizationManager</span><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">MethodInvocation</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthorizationDecision</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Authentication</span><span class=\"token punctuation\">></span></span> authentication<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodInvocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Authorize</span> authorize <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authorize<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">,</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorize <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">AuthorizationManagers</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>authorize<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">manager</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthorizationManager</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">MethodInvocation</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span>computeIfAbsentclazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>And then finally, publish an interceptor:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>ROLE_INFRASTRUCTURE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">MethodInterceptor</span> <span class=\"token function\">authorizeInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizeAuthorizationManager</span> authorize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> interceptor <span class=\"token operator\">=</span> <span class=\"token class-name\">AuthorizationManagerBeforeMethodInterceptor</span><span class=\"token punctuation\">.</span><span class=\"token function\">preAuthorize</span><span class=\"token punctuation\">(</span>authorize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthorizeInterceptorOrder</span><span class=\"token punctuation\">.</span>PRE_AUTHORIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This allows you to unit-test the authorization classes and get compile-time feedback on authorization expressions.</p>\n<hr>\n<h2 id=\"tags\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tags\"></a>Tags</h2>\n<ol>\n<li><a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">spring-security (Private)</a></li>\n</ol>","noteIndex":{"id":"root","title":"root","desc":"","updated":1605266684036,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"jzheaux.github.io"},"contentHash":"b49e7e13a0c91addc8ab9ef97080cf1e","links":[],"anchors":{},"children":["wv8pjhxjjrp5bnwlz2kznsg","5z8np7ysy5lpx5gon0rlxi6"],"parent":null,"data":{},"body":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"jzheaux.github.io"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false,"enableHandlebarTemplates":true,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableMermaid":true},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"siteUrl":"https://jzheaux.github.io","writeStubs":false,"siteRootDir":"docs","seo":{"title":"Cup of Jzheaux","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","enableMermaid":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}